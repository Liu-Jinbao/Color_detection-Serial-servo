#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<iostream>
using namespace std;
using namespace cv;
int main(int argc,char**argv)
{
	VideoCapture cap(0);
	if(!cap.isOpened())
	{
		cout<<"The camare can't be opened.."<<endl;
		system("pause");
		return -1;
	}
	while(1)
	{
		Mat imgOriginal;
		bool success = cap.read(imgOriginal);
		if(!success)
		{
			cout<<"Can't read a frame from video stream"<<endl;
			system("pause");
			return -1;
		}
		namedWindow("Qriginal Image",CV_WINDOW_AUTOSIZE); 
		imshow("Qriginal Image",imgOriginal);
		
		Mat imgHSV;
		cvtColor(imgOriginal,imgHSV,COLOR_BGR2HSV);

		Mat imgThresholded;
		inRange(imgHSV,Scalar(0,126,42),Scalar(179,126,42),imgThresholded);
	
		erode(imgThresholded,imgThresholded,getStructuringElement(MORPH_ELLIPSE,Size(5,5)));
		dilate(imgThresholded,imgThresholded,getStructuringElement(MORPH_ELLIPSE,Size(5,5)));
		
		dilate(imgThresholded,imgThresholded,getStructuringElement(MORPH_ELLIPSE,Size(5,5)));
		erode(imgThresholded,imgThresholded,getStructuringElement(MORPH_ELLIPSE,Size(5,5)));
	
		namedWindow("Thresholded Image",CV_WINDOW_AUTOSIZE); 
		imshow("Thresholded Image",imgThresholded);
		
		if(waitKey(30)==27)
	    break;		

	}
	    destroyAllWindows();
		return 0;
}
